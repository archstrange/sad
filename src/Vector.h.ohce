#ifndef ADT_TEMPLATE_$Vector$_H
#define ADT_TEMPLATE_$Vector$_H
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

$pre_decl$

/// ADT-template type -- Vector: Dynamic array of scalar type
///
/// $Vector$: Vector of $T$, generated from Vector.[ch].ohce

typedef struct _ADT_$Vector$ *$Vector$;

$Vector$ $Vector$_newWithCapacity(size_t capacity);

$Vector$ $Vector$_newFromArray(const $T$ *array, size_t length);

$Vector$ $Vector$_clone($Vector$ src);

void $Vector$_dump($Vector$ self, $T$ *buffer);

void $Vector$_dumpn($Vector$ self, $T$ *buffer, size_t n);

void $Vector$_free($Vector$ self);

bool $Vector$_empty($Vector$ self);

size_t $Vector$_getLength($Vector$ self);

void $Vector$_clear($Vector$ self);

void $Vector$_eraseTail($Vector$ self, size_t count);

size_t $Vector$_getCapacity($Vector$ self);

void $Vector$_setCapacity($Vector$ self, size_t capacity);

void $Vector$_shrink($Vector$ self);

void $Vector$_set($Vector$ self, size_t index, $T$ value);

$T$ $Vector$_get($Vector$ self, size_t index);

size_t $Vector$_insert($Vector$ self, size_t index, $T$ value);

$T$ *$Vector$_data($Vector$ self);

size_t $Vector$_push($Vector$ self, $T$ value);

$T$ $Vector$_pop($Vector$ self);

size_t $Vector$_append($Vector$ self, $Vector$ vec);

size_t $Vector$_appendArray($Vector$ self, const $T$ *a, size_t count);

void $Vector$_copy($Vector$ self, $Vector$ src);

void $Vector$_copyn($Vector$ self, $Vector$ src, size_t n);

#endif
